{% extends "base.twig" %}

{% block title %}Ticket Management - TicketFlow{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="css/tickets.css">
{% endblock %}

{% block body %}
<div class="ticket-page">
    <!-- Navigation -->
    <nav class="dashboard-nav">
        <div class="container">
            <div class="nav-content">
                <button class="" id="dashboard" onclick="window.location.href='dashboard.php'">
                    Dashboard
                </button>
                <div class="nav-right">
                    <span class="user-email">{{ user.email }}</span>
                    <a href="logout.php" class="btn btn-outline-danger">
                        Log out
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="ticket-content">
        <div class="container">
            <div class="ticket-header">
                <div>
                    <h1>Ticket Management</h1>
                    <p>Create, view, edit, and delete your tickets</p>
                </div>
                <button class="btn btn-primary" id="toggleFormBtn">
                    + New Ticket
                </button>
            </div>

            <!-- Success/Error Message -->
            <div id="message" class="message hidden"></div>

            <!-- Ticket Form -->
            <div id="ticketFormContainer" class="ticket-form-container" style="display: none;">
                <h2 id="formTitle">Create New Ticket</h2>
                <form id="ticketForm" class="ticket-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="title">Title *</label>
                            <input
                                type="text"
                                id="title"
                                name="title"
                                placeholder="Enter ticket title"
                                required
                            />
                            <span id="titleError" class="error-text"></span>
                        </div>

                        <div class="form-group">
                            <label for="status">Status *</label>
                            <select id="status" name="status" required>
                                <option value="open">Open</option>
                                <option value="in_progress">In Progress</option>
                                <option value="closed">Closed</option>
                            </select>
                            <span id="statusError" class="error-text"></span>
                        </div>

                        <div class="form-group">
                            <label for="priority">Priority</label>
                            <select id="priority" name="priority">
                                <option value="low">Low</option>
                                <option value="medium" selected>Medium</option>
                                <option value="high">High</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea
                            id="description"
                            name="description"
                            placeholder="Enter ticket description (optional)"
                            rows="4"
                        ></textarea>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            Create Ticket
                        </button>
                        <button type="button" class="btn btn-outline" id="cancelBtn">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>

            <!-- Tickets List -->
            <div class="tickets-section">
                <h2>All Tickets (<span id="ticketCount">0</span>)</h2>

                <div id="emptyState" class="empty-state">
                    <div class="empty-icon">üìã</div>
                    <h3>No tickets yet</h3>
                    <p>Create your first ticket to get started!</p>
                </div>

                <div id="ticketsGrid" class="tickets-grid"></div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="dashboard-footer">
        <div class="container">
            <p>&copy; 2025 TicketFlow. All rights reserved.</p>
        </div>
    </footer>
</div>
{% endblock %}

{% block javascripts %}
<script>
// LocalStorage ticket management functions
function getTickets() {
    const ticketsStr = localStorage.getItem('ticketapp_tickets');
    return ticketsStr ? JSON.parse(ticketsStr) : [];
}

function saveTickets(tickets) {
    localStorage.setItem('ticketapp_tickets', JSON.stringify(tickets));
}

function addTicket(ticket) {
    const tickets = getTickets();
    const newTicket = {
        id: Date.now().toString(),
        ...ticket,
        createdAt: new Date().toISOString()
    };
    tickets.push(newTicket);
    saveTickets(tickets);
    return newTicket;
}

function updateTicket(id, updatedData) {
    const tickets = getTickets();
    const index = tickets.findIndex(t => t.id === id);
    
    if (index !== -1) {
        tickets[index] = { ...tickets[index], ...updatedData };
        saveTickets(tickets);
        return tickets[index];
    }
    
    return null;
}

function deleteTicket(id) {
    const tickets = getTickets();
    const filteredTickets = tickets.filter(t => t.id !== id);
    saveTickets(filteredTickets);
    return true;
}

function getTicketById(id) {
    const tickets = getTickets();
    return tickets.find(t => t.id === id);
}

// State
let editingTicketId = null;
let showForm = false;

// Elements
const toggleFormBtn = document.getElementById('toggleFormBtn');
const ticketFormContainer = document.getElementById('ticketFormContainer');
const ticketForm = document.getElementById('ticketForm');
const cancelBtn = document.getElementById('cancelBtn');
const submitBtn = document.getElementById('submitBtn');
const formTitle = document.getElementById('formTitle');
const messageEl = document.getElementById('message');
const ticketsGrid = document.getElementById('ticketsGrid');
const emptyState = document.getElementById('emptyState');
const ticketCount = document.getElementById('ticketCount');

// Load and display tickets
function loadTickets() {
    const tickets = getTickets();
    ticketCount.textContent = tickets.length;

    if (tickets.length === 0) {
        emptyState.style.display = 'block';
        ticketsGrid.style.display = 'none';
    } else {
        emptyState.style.display = 'none';
        ticketsGrid.style.display = 'grid';
        ticketsGrid.innerHTML = '';

        tickets.forEach(ticket => {
            const card = createTicketCard(ticket);
            ticketsGrid.appendChild(card);
        });
    }
}

// Create ticket card element
function createTicketCard(ticket) {
    const card = document.createElement('div');
    card.className = 'ticket-card';

    const statusClass = getStatusClass(ticket.status);
    const statusLabel = getStatusLabel(ticket.status);
    const formattedDate = new Date(ticket.createdAt).toLocaleDateString();

    card.innerHTML = `
        <div class="ticket-card-header">
            <h3>${escapeHtml(ticket.title)}</h3>
            <span class="status-badge ${statusClass}">${statusLabel}</span>
        </div>
        ${ticket.description ? `<p class="ticket-description">${escapeHtml(ticket.description)}</p>` : ''}
        <div class="ticket-meta">
            <span class="priority">Priority: ${ticket.priority || 'medium'}</span>
            <span class="date">${formattedDate}</span>
        </div>
        <div class="ticket-actions">
            <button class="btn btn-small btn-edit" onclick="handleEdit('${ticket.id}')">
                ‚úèÔ∏è Edit
            </button>
            <button class="btn btn-small btn-delete" onclick="handleDelete('${ticket.id}')">
                üóëÔ∏è Delete
            </button>
        </div>
    `;

    return card;
}

// Toggle form visibility
toggleFormBtn.addEventListener('click', function() {
    showForm = !showForm;
    
    if (showForm) {
        ticketFormContainer.style.display = 'block';
        toggleFormBtn.textContent = 'Cancel';
    } else {
        ticketFormContainer.style.display = 'none';
        toggleFormBtn.textContent = '+ New Ticket';
        resetForm();
    }
});

// Cancel button
cancelBtn.addEventListener('click', function() {
    showForm = false;
    ticketFormContainer.style.display = 'none';
    toggleFormBtn.textContent = '+ New Ticket';
    resetForm();
});

// Form submission
ticketForm.addEventListener('submit', function(e) {
    e.preventDefault();

    // Clear previous errors
    document.getElementById('titleError').textContent = '';
    document.getElementById('statusError').textContent = '';
    messageEl.classList.add('hidden');

    // Get form data
    const formData = {
        title: document.getElementById('title').value.trim(),
        status: document.getElementById('status').value,
        priority: document.getElementById('priority').value,
        description: document.getElementById('description').value.trim()
    };

    // Validate
    if (!formData.title) {
        document.getElementById('titleError').textContent = 'Title is required';
        return;
    }

    if (!['open', 'in_progress', 'closed'].includes(formData.status)) {
        document.getElementById('statusError').textContent = 'Invalid status';
        return;
    }

    // Create or update ticket
    if (editingTicketId) {
        updateTicket(editingTicketId, formData);
        showMessage('Ticket updated successfully!', 'success');
    } else {
        addTicket(formData);
        showMessage('Ticket created successfully!', 'success');
    }

    // Reset and reload
    resetForm();
    showForm = false;
    ticketFormContainer.style.display = 'none';
    toggleFormBtn.textContent = '+ New Ticket';
    loadTickets();
});

// Edit ticket
window.handleEdit = function(ticketId) {
    const ticket = getTicketById(ticketId);
    if (!ticket) return;

    editingTicketId = ticketId;
    showForm = true;

    // Populate form
    document.getElementById('title').value = ticket.title;
    document.getElementById('status').value = ticket.status;
    document.getElementById('priority').value = ticket.priority || 'medium';
    document.getElementById('description').value = ticket.description || '';

    // Update UI
    formTitle.textContent = 'Edit Ticket';
    submitBtn.textContent = 'Update Ticket';
    ticketFormContainer.style.display = 'block';
    toggleFormBtn.textContent = 'Cancel';

    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
};

// Delete ticket
window.handleDelete = function(ticketId) {
    if (confirm('Are you sure you want to delete this ticket?')) {
        deleteTicket(ticketId);
        showMessage('Ticket deleted successfully!', 'success');
        loadTickets();
    }
};

// Reset form
function resetForm() {
    editingTicketId = null;
    ticketForm.reset();
    formTitle.textContent = 'Create New Ticket';
    submitBtn.textContent = 'Create Ticket';
    document.getElementById('titleError').textContent = '';
    document.getElementById('statusError').textContent = '';
}

// Show message
function showMessage(text, type) {
    messageEl.textContent = text;
    messageEl.className = `message ${type}`;
    messageEl.classList.remove('hidden');

    setTimeout(() => {
        messageEl.classList.add('hidden');
    }, 3000);
}

// Helper functions
function getStatusClass(status) {
    switch(status) {
        case 'open': return 'status-open';
        case 'in_progress': return 'status-progress';
        case 'closed': return 'status-closed';
        default: return '';
    }
}

function getStatusLabel(status) {
    switch(status) {
        case 'open': return 'Open';
        case 'in_progress': return 'In Progress';
        case 'closed': return 'Closed';
        default: return status;
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Load tickets on page load
loadTickets();
</script>
{% endblock %}